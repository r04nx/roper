#!/bin/bash

# Roper CLI Tool
# Manage Roper Code Assistant from anywhere

ROPER_DIR="/home/rohan/Downloads/roper"
ROPER_PID_FILE="/tmp/roper.pid"
ROPER_LOG_FILE="/tmp/roper.logs"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

# Check if roper is running
is_running() {
    if [ -f "$ROPER_PID_FILE" ]; then
        local pid=$(cat "$ROPER_PID_FILE")
        if ps -p "$pid" > /dev/null 2>&1; then
            return 0  # Running
        else
            # PID file exists but process is dead, clean up
            rm -f "$ROPER_PID_FILE"
            return 1  # Not running
        fi
    else
        return 1  # Not running
    fi
}

# Start roper
start_roper() {
    if is_running; then
        print_warning "Roper is already running (PID: $(cat $ROPER_PID_FILE))"
        return 1
    fi

    print_status "Starting Roper Code Assistant..."
    
    # Check if roper directory exists
    if [ ! -d "$ROPER_DIR" ]; then
        print_error "Roper directory not found: $ROPER_DIR"
        return 1
    fi

    # Start roper in background
    cd "$ROPER_DIR"
    nohup python3 roper.py > /dev/null 2>&1 &
    local pid=$!
    
    # Save PID
    echo $pid > "$ROPER_PID_FILE"
    
    # Wait a moment to see if it started successfully
    sleep 2
    
    if is_running; then
        print_success "Roper started successfully (PID: $pid)"
        print_status "üìù Alt+X: Analyze MCQ questions"
        print_status "üíª Alt+Z: Generate code solution"
        print_status "‚å®Ô∏è  Alt+C: Auto-type code (with comments)"
        print_status "üõë Escape: Quit"
        print_status "üìÑ Logs: $ROPER_LOG_FILE"
        return 0
    else
        print_error "Failed to start Roper"
        rm -f "$ROPER_PID_FILE"
        return 1
    fi
}

# Stop roper with enhanced force killing
stop_roper() {
    print_status "Initiating powerful Roper shutdown..."
    
    local stopped_any=false
    
    # Method 1: PID-based killing
    if [ -f "$ROPER_PID_FILE" ]; then
        local pid=$(cat "$ROPER_PID_FILE")
        if ps -p "$pid" > /dev/null 2>&1; then
            print_status "Found Roper process (PID: $pid), terminating..."
            
            # Try graceful shutdown first
            kill -TERM "$pid" 2>/dev/null
            sleep 2
            
            # Try INT signal
            if ps -p "$pid" > /dev/null 2>&1; then
                print_warning "TERM failed, trying INT signal..."
                kill -INT "$pid" 2>/dev/null
                sleep 2
            fi
            
            # Force kill with KILL signal
            if ps -p "$pid" > /dev/null 2>&1; then
                print_warning "INT failed, using KILL signal..."
                kill -KILL "$pid" 2>/dev/null
                sleep 1
            fi
            
            if ! ps -p "$pid" > /dev/null 2>&1; then
                print_success "PID-based termination successful"
                stopped_any=true
            fi
        fi
        rm -f "$ROPER_PID_FILE"
    fi
    
    # Method 2: Process name-based killing (nuclear option)
    print_status "Performing process name-based cleanup..."
    
    # Kill all python processes with 'roper' in command line
    local roper_pids=$(pgrep -f "python.*roper\.py" 2>/dev/null)
    if [ ! -z "$roper_pids" ]; then
        print_warning "Found additional Roper processes: $roper_pids"
        for pid in $roper_pids; do
            print_status "Force killing process $pid..."
            kill -KILL "$pid" 2>/dev/null
            stopped_any=true
        done
        sleep 1
    fi
    
    # Method 3: pkill fallback
    print_status "Running pkill cleanup..."
    pkill -f "python.*roper\.py" 2>/dev/null && stopped_any=true
    pkill -f "roper\.py" 2>/dev/null && stopped_any=true
    sleep 1
    
    # Method 4: killall fallback
    print_status "Running killall cleanup..."
    killall -9 python3 2>/dev/null | grep -i roper && stopped_any=true
    
    # Clean up any remaining files
    print_status "Cleaning up temporary files..."
    rm -f "$ROPER_PID_FILE" 2>/dev/null
    rm -f "/tmp/roper_screenshot.png" 2>/dev/null
    
    # Verify complete shutdown
    local remaining=$(pgrep -f "python.*roper" 2>/dev/null | wc -l)
    if [ "$remaining" -eq 0 ]; then
        if [ "$stopped_any" = true ]; then
            print_success "üî• Roper FORCEFULLY terminated - all processes eliminated!"
        else
            print_warning "Roper was not running"
        fi
        return 0
    else
        print_error "‚ö†Ô∏è  Warning: $remaining Roper processes may still be running"
        print_error "Run 'roper kill' for nuclear option"
        return 1
    fi
}

# Nuclear option - kill everything related to roper
kill_roper() {
    print_error "üö® NUCLEAR OPTION: Killing ALL Roper-related processes..."
    
    # Kill all python processes (nuclear)
    print_warning "Killing all Python processes containing 'roper'..."
    pkill -9 -f "roper" 2>/dev/null
    pkill -9 -f "python.*roper" 2>/dev/null
    
    # Kill by exact script name
    pkill -9 -f "roper.py" 2>/dev/null
    
    # Kill any process with roper in the name
    killall -9 roper 2>/dev/null
    
    # Clean up all temp files
    print_status "Cleaning up ALL temporary files..."
    rm -f /tmp/roper* 2>/dev/null
    rm -f /tmp/*roper* 2>/dev/null
    
    # Final verification
    sleep 2
    local remaining=$(pgrep -f "roper" 2>/dev/null | wc -l)
    if [ "$remaining" -eq 0 ]; then
        print_success "üíÄ NUCLEAR TERMINATION COMPLETE - No survivors!"
        return 0
    else
        print_error "‚ö†Ô∏è  $remaining processes survived the nuclear option"
        print_error "You may need to manually kill PID(s): $(pgrep -f 'roper' 2>/dev/null | tr '\n' ' ')"
        return 1
    fi
}

# Restart roper
restart_roper() {
    print_status "Restarting Roper..."
    stop_roper
    sleep 1
    start_roper
}

# Toggle roper (start if stopped, stop if running)
toggle_roper() {
    if is_running; then
        stop_roper
    else
        start_roper
    fi
}

# Show roper status
status_roper() {
    if is_running; then
        local pid=$(cat "$ROPER_PID_FILE")
        print_success "Roper is running (PID: $pid)"
        
        # Show some system info
        echo -e "${CYAN}Process Info:${NC}"
        ps -p "$pid" -o pid,ppid,pcpu,pmem,etime,cmd --no-headers 2>/dev/null || echo "  Process details unavailable"
        
        # Show recent logs if available
        if [ -f "$ROPER_LOG_FILE" ]; then
            echo -e "\n${CYAN}Recent Logs:${NC}"
            tail -n 5 "$ROPER_LOG_FILE" 2>/dev/null || echo "  No recent logs available"
        fi
    else
        print_warning "Roper is not running"
    fi
}

# Show logs
logs_roper() {
    if [ -f "$ROPER_LOG_FILE" ]; then
        if [ "$1" = "-f" ] || [ "$1" = "--follow" ]; then
            print_status "Following Roper logs (Ctrl+C to exit)..."
            tail -f "$ROPER_LOG_FILE"
        else
            print_status "Showing recent Roper logs..."
            tail -n 20 "$ROPER_LOG_FILE"
        fi
    else
        print_warning "Log file not found: $ROPER_LOG_FILE"
    fi
}

# Show help
show_help() {
    cat << EOF
${PURPLE}Roper Code Assistant CLI${NC}

${CYAN}USAGE:${NC}
    roper <command> [options]

${CYAN}COMMANDS:${NC}
    ${GREEN}start${NC}       Start Roper Code Assistant
    ${GREEN}stop${NC}        Stop Roper Code Assistant (enhanced force kill)
    ${RED}kill${NC}        üö® NUCLEAR OPTION: Force kill ALL Roper processes
    ${GREEN}restart${NC}     Restart Roper Code Assistant
    ${GREEN}toggle${NC}      Toggle Roper (start if stopped, stop if running)
    ${GREEN}status${NC}      Show Roper status and process information
    ${GREEN}logs${NC}        Show recent logs
    ${GREEN}logs -f${NC}     Follow logs in real-time
    ${GREEN}help${NC}        Show this help message

${CYAN}KEYBOARD SHORTCUTS (when running):${NC}
    üìù Alt+X     Analyze MCQ questions
    üíª Alt+Z     Generate code solution  
    ‚å®Ô∏è  Alt+C     Auto-type code (with comments)
    üõë Escape    Quit Roper

${CYAN}FILES:${NC}
    Config:      $ROPER_DIR/.env
    Logs:        $ROPER_LOG_FILE
    PID:         $ROPER_PID_FILE

${CYAN}EXAMPLES:${NC}
    roper start          # Start Roper
    roper stop           # Stop Roper
    roper restart        # Restart Roper
    roper status         # Check if running
    roper logs -f        # Follow logs
    roper toggle         # Start if stopped, stop if running

EOF
}

# Main command handling
case "$1" in
    start)
        start_roper
        ;;
    stop)
        stop_roper
        ;;
    kill)
        kill_roper
        ;;
    restart)
        restart_roper
        ;;
    toggle)
        toggle_roper
        ;;
    status)
        status_roper
        ;;
    logs)
        logs_roper "$2"
        ;;
    help|--help|-h)
        show_help
        ;;
    "")
        print_error "No command specified"
        echo ""
        show_help
        exit 1
        ;;
    *)
        print_error "Unknown command: $1"
        echo ""
        show_help
        exit 1
        ;;
    esac
